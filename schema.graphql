
"""
A directive that specifies that a field cannot have a null value.
"""
directive @notNull on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
A directive that enforces that an input field or argument value must not be empty.
"""
directive @notEmpty on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
A directive that specifies a numeric range for a field's value.
The field's value must be within the specified minimum and maximum (inclusive) bounds.
"""
directive @range(
    """
    The minimum value allowed for the field. Defaults to 0 if not provided.
    """
    min: Int = 0,

    """
    The maximum value allowed for the field. Defaults to positive infinity if not provided.
    """
    max: Int = Infinity
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
A directive that specifies a length range for an input field or argument value.
The value's length must be within the specified minimum and maximum (inclusive) bounds.
"""
directive @length(
    """
    The minimum length allowed for the value. Defaults to 0 if not provided.
    """
    min: Int = 0,
    """
    The maximum length allowed for the value. Defaults to positive infinity if not provided.
    """
    max: Int = Infinity
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
A date string, such as 2007-12-03, compliant with the `full-date`
format outlined in section 5.6 of the RFC 3339 profile of the
ISO 8601 standard for representation of dates and times using
the Gregorian calendar.
"""
scalar Date


"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

enum PageTypeEnum {
    """
    Represents a PDF document.
    """
    PDF
    """
    Represents a JPEG image.
    """
    JPEG
    """
    Represents a PNG image.
    """
    PNG
    """
    Represents a WEBP image.
    """
    WEBP
}

type Page {
    """
    The unique identifier for the page.
    """
    id: UUID!
    """
    The type of the page (e.g., PDF, JPEG, etc.).
    """
    type: PageTypeEnum!
    """
    The date on which page was created
    """
    date: Date!
    """
    The URL of the website.
    """
    site: URL!
    """
    The URL of the page's file.
    """
    file: URL!
}

type PageEdge {
    """
    The actual page data.
    """
    node: Page!
    """
    A cursor for pagination purposes.
    """
    cursor: UUID!
}

type Pages {
    """
    A list of page edges.
    """
    edges: [PageEdge!]!
    """
    Information about pagination.
    """
    pageInfo: PageInfo!
}

type PageInfo {
    """
    Indicates if there are more pages after the current set.
    """
    hasNextPage: Boolean!
    """
    Indicates if there are more pages before the current set.
    """
    hasPreviousPage: Boolean!
    """
    The cursor marking the start of the current set.
    """
    startCursor: UUID
    """
    The cursor marking the end of the current set.
    """
    endCursor: UUID
}

input PageTypeEnumFilter {
    """
    Filters for pages with the specified type.
    """
    eq: PageTypeEnum @notNull
    """
    Filters for pages not of the specified type.
    """
    ne: PageTypeEnum @notNull
    """
    Filters for pages with types in the specified list.
    """
    in: [PageTypeEnum!] @notNull @length(min: 1)
    """
    Filters for pages not in the specified list of types.
    """
    nin: [PageTypeEnum!] @notNull @length(min: 1)
}

input DateFilter {
    """
    Filters for dates greater than the specified value.
    """
    gt: Date @notNull
    """
    Filters for dates less than the specified value.
    """
    lt: Date @notNull
    """
    Filters for dates greater than or equal to the specified value.
    """
    gte: Date @notNull
    """
    Filters for dates less than or equal to the specified value.
    """
    lte: Date @notNull
}

input PageFilterInput {
    """
    Filters for pages based on their types.
    """
    type: PageTypeEnumFilter @notNull
    """
    Filters for pages based on date ranges.
    """
    date: DateFilter @notNull
}

enum SortFieldEnum {
    """
    Sort by page type
    """
    TYPE
    """
    Sort by page date
    """
    DATE
    """
    Sort by page site
    """
    SITE
    """
    Sort by page file
    """
    FILE
}

enum SortOrderEnum {
    """
    Sort in ascending order
    """
    ASC
    """
    Sort in descending order
    """
    DESC
}

input PageSortInput {
    """
    Specify the field to sort by
    """
    field: SortFieldEnum!
    """
    Specify the sorting order
    """
    order: SortOrderEnum!
}

interface BaseError {
  message: String!
}

type InputFieldValidation {
  field: String!
  message: String!
}

type InvalidInputError implements BaseError {
  message: String!
  inputs: [InputFieldValidation!]!
}

type NotFoundError implements BaseError {
  message: String!
}

type UnknownError implements BaseError {
  message: String!
}

union PageResult = Page | InvalidInputError | NotFoundError | UnknownError
union PagesResult = Pages | InvalidInputError | UnknownError

type Query {
    """
    Retrieves a list of pages.
    """  
    pages(
        """
        Retrieves the first N pages.
        """
        first: Int @notNull @range(min: 0, max: 10000),
        """
        Retrieves the last N pages.
        """
        last: Int @notNull @range(min: 0, max: 10000),
        """
        Retrieves pages before the specified cursor.
        """
        before: UUID @notNull,
        """
        Retrieves pages after the specified cursor.
        """
        after: UUID @notNull,
        """
        Applies filters to page retrieval.
        """
        filter: PageFilterInput @notNull
        """
        Specifies the sorting order for the retrieved pages.
        """
        sort: PageSortInput @notNull
    ): PagesResult!
    """
    Retrieves a specific page by its ID.
    """  
    page(id: UUID!): PageResult!
}

input CreatePageInput {
    """
    The type of the page.
    """
    type: PageTypeEnum!
    """
    The URL of the website for the new page.
    """
    site: URL!
}

input UpdatePageInput {
    """
    The type of the page.
    """
    type: PageTypeEnum @notNull
    """
    The URL of the website for the new page.
    """
    site: URL @notNull
}

type Mutation {
    """
    Creates a new page.
    """
    createPage(input: CreatePageInput!): PageResult!
    """
    Updates a page.
    """
    updatePage(id: UUID!, input: UpdatePageInput! @notEmpty): PageResult!
    """
    Deletes a page.
    """
    deletePage(id: UUID!): PageResult!
}
